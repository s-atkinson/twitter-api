1. Create a feature file and use either a cucumber before tag or a background step on the feature file to post a tweet. Subsequent tests then use that tweet id to verify body, like, verify user etc
2. Create a feature file for adding multiple tweets/deleting tweets/ deleting all tweets
3. Create a feature file for testing streams
4. Create an after tag to delete all tweets
5. Try using log4j, serenity, blue ocean, slack notifications and more - https://www.blazemeter.com/blog/qa-automation-pipeline-learn-how-to-build-your-own
6. Look into using a hashmap for key value pairs to save tweet id and look it up.
7. Look into using @After tag to clean up tweets by deleting all or by user id
8. Use switch events to authorize different users e.g. twitterv1.1, twitterv2, gmail etc
9. Look into running parallel cucumber tests







Test ideas

Background

Given I post a status update and save the id as "id"

Scenario:

Given an authorized twitter_v2 user
When I lookup a tweet with id "id" and query params name:"tweet.fields?place.fields" type:"author_id,public_metrics?country"
And the response statuscode is 200
Then the response body contains key:"" with value:""

Given an authorized twitter_v1.1 user
When I post a status update ""
And the response statuscode is 200
Then the response body contains key:"" with value:""

Given an authorized twitter user
When I add a rule with value:"" and tag:""
And the response statuscode is 202
Then the response body contains key:"" with value:""

Given an authorized twitter user
When I retrieve all rules
And the response statuscode is 200
Then the response body contains key:"" with value:""

//try using pojo class
Given an authorized twitter user
When I add "2" rule(s) with value(s):"" and tag(s):""
And the response statuscode is 202
Then the pojo response body contains key:"" with value:"" totalling "2" rule(s) created



Create a feature file for generic reusable examples for any framework:

//filtered stream add rule
Given an authorized "twitter_v2" user
When I send a POST request to the "" endpoint with body "file.json"
And the response statuscode is 200
Then the response body contains key:"" with value:""

//filtered stream retrieve rule
Given an authorized "twitter_v2" user
When I send a GET request to the "" endpoint with body "file.json"
And the response statuscode is 200
Then the response body contains key:"" with value:""

//get tweet/rule
Given an authorized "twitter_v2" user
When I send a GET request the "" endpoint with queryparams key:"" value:""
And the response statuscode is 200
Then the response body is equal to "file.json or pojo class"

//post tweet
Given an authorized "twitter_v1.1" user
When I send a POST request the "" endpoint with queryparams key:"" value:""
And the response statuscode is 200
Then the response body is equal to "file.json"

